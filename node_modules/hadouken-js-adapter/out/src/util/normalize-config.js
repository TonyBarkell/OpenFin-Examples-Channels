"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const wire_1 = require("../transport/wire");
const url_1 = require("url");
const fs = require("fs");
const promises_1 = require("./promises");
async function readLocalConfig(location) {
    const txt = await promises_1.promisify(fs.readFile)(location);
    return JSON.parse(txt.toString());
}
async function downloadConfig(url) {
    const protocol = await Promise.resolve().then(() => require(url.protocol.slice(0, -1)));
    const res = await new Promise(async (resolve, reject) => {
        const request = protocol.get(url, (response) => {
            if (response.statusCode < 200 || response.statusCode > 299) {
                reject(new Error('Failed to load page, status code: ' + response.statusCode));
            }
            const body = [];
            response.on('data', (chunk) => {
                body.push(chunk);
            });
            response.on('end', () => resolve(body.join('')));
        });
        request.on('error', (err) => reject(err));
    });
    return JSON.parse(res);
}
async function loadConfig(config) {
    try {
        const x = url_1.parse(config.manifestUrl);
        return await downloadConfig(x);
    }
    catch (e) {
        try {
            return await readLocalConfig(config.manifestUrl);
        }
        catch (e) {
            throw new Error('Could not locate JSON at supplied manifestUrl');
        }
    }
}
async function normalizeConfig(config) {
    const testThisConfig = config;
    if (wire_1.isExternalConfig(config)) {
        const loadedConfig = await loadConfig(config);
        testThisConfig.runtime = loadedConfig.runtime;
        if (typeof loadedConfig.assetsUrl === 'string') {
            testThisConfig.assetsUrl = loadedConfig.assetsUrl;
        }
    }
    return testThisConfig;
}
exports.normalizeConfig = normalizeConfig;
async function validateConfig(config) {
    const normalized = await normalizeConfig(config);
    if (wire_1.isInternalConnectConfig(normalized)) {
        return normalized;
    }
    else {
        throw new Error('Invalid Config');
    }
}
exports.validateConfig = validateConfig;
//# sourceMappingURL=normalize-config.js.map