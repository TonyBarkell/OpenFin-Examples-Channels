"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fin_1 = require("./api/fin");
exports.Fin = fin_1.default;
const application_1 = require("./api/application/application");
exports.Application = application_1.Application;
const window_1 = require("./api/window/window");
exports.Window = window_1._Window;
const frame_1 = require("./api/frame/frame");
exports.Frame = frame_1._Frame;
const notification_1 = require("./api/notification/notification");
exports.Notification = notification_1._Notification;
const system_1 = require("./api/system/system");
exports.System = system_1.default;
const wire_1 = require("./transport/wire");
const node_env_1 = require("./environment/node-env");
const transport_1 = require("./transport/transport");
const websocket_1 = require("./transport/websocket");
const port_discovery_1 = require("./transport/port-discovery");
const normalize_config_1 = require("./util/normalize-config");
const environment = new node_env_1.default();
// Connect to an OpenFin Runtime
async function connect(config) {
    const wire = new transport_1.default(websocket_1.default, environment);
    const normalized = await normalize_config_1.validateConfig(config);
    await wire.connect(normalized);
    return new fin_1.default(wire);
}
exports.connect = connect;
async function launch(config) {
    const normalized = await normalize_config_1.normalizeConfig(config);
    if (!wire_1.isPortDiscoveryConfig(normalized)) {
        throw new Error('Invalid Config');
    }
    const pd = new port_discovery_1.PortDiscovery(normalized, environment);
    return pd.retrievePort();
}
exports.launch = launch;
//# sourceMappingURL=main.js.map