"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const wire_1 = require("./wire");
const transport_errors_1 = require("./transport-errors");
const openfin_renderer_api_1 = require("../environment/openfin-renderer-api");
class ElIPCTransport extends events_1.EventEmitter {
    constructor(onmessage) {
        super();
        this.wire = openfin_renderer_api_1.ipc;
        this.connectSync = () => {
            openfin_renderer_api_1.ipc.on(openfin_renderer_api_1.inboundTopic, (sender, data) => {
                try {
                    this.onmessage(JSON.parse(data));
                }
                catch (err) {
                    //Do something of value here.
                    throw err;
                }
            });
        };
        this.connect = (address) => {
            throw new transport_errors_1.NotImplementedError('Not Implemented');
        };
        this.onmessage = onmessage;
    }
    send(data, flags) {
        openfin_renderer_api_1.ipc.send(openfin_renderer_api_1.routingId, openfin_renderer_api_1.outboundTopic, data);
        return Promise.resolve();
    }
    shutdown() {
        return Promise.reject('Not Implemented');
    }
}
ElIPCTransport.READY_STATE = wire_1.READY_STATE;
exports.default = ElIPCTransport;
//# sourceMappingURL=elipc.js.map