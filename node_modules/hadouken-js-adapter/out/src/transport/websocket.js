"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const WebSocket = require("ws");
const wire_1 = require("./wire");
const transport_errors_1 = require("./transport-errors");
class WebSocketTransport extends events_1.EventEmitter {
    constructor(onmessage) {
        super();
        this.connect = (address) => {
            return new Promise((resolve, reject) => {
                this.wire = new WebSocket(address);
                this.wire.addEventListener('open', resolve);
                this.wire.addEventListener('error', reject);
                this.wire.addEventListener('ping', this.wire.pong);
                this.wire.addEventListener('message', (message, flags) => this.onmessage.call(null, JSON.parse(message.data)));
                this.wire.addEventListener('close', () => {
                    this.emit('disconnected');
                });
            });
        };
        this.connectSync = () => {
            throw new transport_errors_1.NotImplementedError('Not Implemented');
        };
        this.onmessage = onmessage;
    }
    send(data, flags) {
        return new Promise((resolve, reject) => {
            if (this.wire.readyState !== wire_1.READY_STATE.OPEN) {
                reject(new transport_errors_1.DisconnectedError(this.wire.readyState));
            }
            else {
                this.wire.send(JSON.stringify(data), flags, resolve);
            }
        });
    }
    shutdown() {
        this.wire.terminate();
        return Promise.resolve();
    }
}
WebSocketTransport.READY_STATE = wire_1.READY_STATE;
exports.default = WebSocketTransport;
//# sourceMappingURL=websocket.js.map