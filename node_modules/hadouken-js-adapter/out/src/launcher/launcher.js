"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const win_launch_1 = require("./win-launch");
const nix_launch_1 = require("./nix-launch");
class Launcher {
    constructor() {
        this.OpenFin_Installer = 'OpenFinInstaller.exe';
        this.Installer_Work_Dir = path.join(os.tmpdir(), 'openfinnode');
        this.Security_Realm_Config_Key = '--security-realm=';
        this.os = os.platform();
        if (this.os !== 'win32') {
            if (this.os === 'darwin') {
                this.nixConfig = {
                    urlPath: 'mac/x64',
                    executablePath: 'OpenFin.app/Contents/MacOS/OpenFin'
                };
            }
            else if (this.os === 'linux') {
                this.nixConfig = {
                    urlPath: `linux/${os.arch()}`,
                    executablePath: 'openfin'
                };
            }
            else {
                throw new Error(`Launching not supported on ${this.os}`);
            }
        }
    }
    launch(config, manifestLocation, namedPipeName) {
        if (this.os === 'win32') {
            return this.winLaunch(config, manifestLocation, namedPipeName);
        }
        else if (this.os === 'darwin') {
            const osConf = Object.assign({ manifestLocation,
                namedPipeName }, this.nixConfig);
            return this.macLaunch(config, osConf);
        }
        else if (this.os === 'linux') {
            const osConf = Object.assign({ manifestLocation,
                namedPipeName, urlPath: `linux/${os.arch()}`, executablePath: 'openfin' }, this.nixConfig);
            return this.macLaunch(config, osConf);
        }
        else {
            throw new Error(`Launching not supported on ${this.os}`);
        }
    }
    static IS_SUPPORTED() {
        const platform = os.platform();
        return platform === 'win32' || platform === 'darwin' || os.platform() === 'linux';
    }
    macLaunch(config, osConfig) {
        return nix_launch_1.default(config, osConfig);
    }
    winLaunch(config, manifestLocation, namedPipeName) {
        return win_launch_1.default(config, manifestLocation, namedPipeName, this.Installer_Work_Dir);
    }
}
exports.default = Launcher;
//# sourceMappingURL=launcher.js.map