"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const child_process_1 = require("child_process");
const util_1 = require("./util");
const OpenFin_Installer = 'OpenFinInstaller.exe';
function copyInstaller(Installer_Work_Dir) {
    return new Promise(async (resolve, reject) => {
        await util_1.resolveDir(os.tmpdir(), ['openfinnode']);
        const rd = fs.createReadStream(path.join(__dirname, '..', '..', 'resources', 'win', OpenFin_Installer));
        const outf = path.join(Installer_Work_Dir, OpenFin_Installer);
        const wr = fs.createWriteStream(outf);
        wr.on('error', (err) => reject(err));
        wr.on('finish', () => {
            resolve(outf);
        });
        rd.pipe(wr);
    });
}
async function checkRVMAsync(config, Installer_Work_Dir, manifestLocation) {
    const rvmPath = path.resolve(process.env.LOCALAPPDATA, 'OpenFin', 'OpenFinRVM.exe');
    if (!await util_1.exists(rvmPath)) {
        await new Promise(async (resolve, reject) => {
            const installer = await copyInstaller(Installer_Work_Dir);
            const installing = child_process_1.spawn(installer, [`--config=${manifestLocation}`, '--do-not-launch']);
            installing.on('exit', (code) => {
                resolve();
            });
            installing.on('error', reject);
        });
        if (!await util_1.exists(rvmPath)) {
            throw new Error('Failed to install the RVM');
        }
    }
    return rvmPath;
}
function launchRVM(config, manifestLocation, namedPipeName, rvm) {
    const runtimeArgs = `--runtime-arguments=--runtime-information-channel-v6=${namedPipeName}`;
    const rvmArgs = [];
    if (config.installerUI !== true) {
        rvmArgs.push('--no-ui');
    }
    rvmArgs.push(`--config=${manifestLocation}`);
    rvmArgs.push(runtimeArgs);
    if (config.runtime.rvmDir) {
        rvmArgs.push(`--working-dir=${config.runtime.rvmDir}`);
    }
    if (config.assetsUrl) {
        rvmArgs.push(`--assetsUrl=${config.assetsUrl}`);
    }
    return child_process_1.spawn(rvm, rvmArgs, { stdio: ['pipe', 'ignore', 'pipe'] });
}
const checkRVM = makeQueued(checkRVMAsync);
// tslint:disable-next-line:max-line-length
async function launch(config, manifestLocation, namedPipeName, Installer_Work_Dir) {
    const rvmPath = await checkRVM(config, Installer_Work_Dir, manifestLocation);
    return await launchRVM(config, manifestLocation, namedPipeName, rvmPath);
}
exports.default = launch;
function makeQueued(func) {
    let initial;
    return async function (...args) {
        const x = initial || Promise.resolve();
        initial = x
            .then(() => new Promise((resolve, reject) => setImmediate(() => resolve())))
            .then(() => func(...args))
            .catch(() => func(...args));
        return initial;
        // tslint:disable-next-line:prefer-type-cast no-function-expression
    };
}
//# sourceMappingURL=win-launch.js.map